
practica-3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012a4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001450  08001450  00011450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800147c  0800147c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800147c  0800147c  0001147c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001484  08001484  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001484  08001484  00011484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001488  08001488  00011488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800148c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000020  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_line   00003e32  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 00000089  00000000  00000000  00023eb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   00002f67  00000000  00000000  00023f3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00000c94  00000000  00000000  00026ea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000003c8  00000000  00000000  00027b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb194  00000000  00000000  00027f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 0000029f  00000000  00000000  000f3094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00021375  00000000  00000000  000f3333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00000d18  00000000  00000000  001146a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001438 	.word	0x08001438

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08001438 	.word	0x08001438

080001ec <asm_potencia>:
// r4: acumulador
// **************************************************************************
.global asm_potencia
.thumb_func
	asm_potencia:
		push {r4}
 80001ec:	b410      	push	{r4}
		mov r4, #0
 80001ee:	f04f 0400 	mov.w	r4, #0

		cbz r0, potencia_end		// Checkear si *vecIn es NULL
 80001f2:	b158      	cbz	r0, 800020c <potencia_end>
		cbz r1, potencia_end		// Checkear si longitud es cero
 80001f4:	b151      	cbz	r1, 800020c <potencia_end>

		mov r2, r1					// Guardo longitud en indice
 80001f6:	460a      	mov	r2, r1

080001f8 <potencia_loop>:

	potencia_loop:
		sub r2, #1     				// Decrementar en 1 indice de vecIn
 80001f8:	f1a2 0201 	sub.w	r2, r2, #1

		ldrsh r3, [r0, r2, LSL #1]	// Cargar siguiente elemento de vecIn
 80001fc:	f930 3012 	ldrsh.w	r3, [r0, r2, lsl #1]
		muls  r3, r3, r3
 8000200:	435b      	muls	r3, r3

		add r4, r3, r4				// Acumular
 8000202:	441c      	add	r4, r3

		cbz r2, potencia_end		// Si indice de vectorIn no es 0, repetir el loop
 8000204:	b112      	cbz	r2, 800020c <potencia_end>
		b potencia_loop
 8000206:	e7f7      	b.n	80001f8 <potencia_loop>

		sdiv r4, r4, r1 				// Divido por la cantidad de elementos
 8000208:	fb94 f4f1 	sdiv	r4, r4, r1

0800020c <potencia_end>:

	potencia_end:
		mov r0, r4
 800020c:	4620      	mov	r0, r4
		pop {r4}
 800020e:	bc10      	pop	{r4}
		bx lr               		// Volver de la función
 8000210:	4770      	bx	lr

08000212 <asm_medDif>:
// r6: e[n]
// **************************************************************************
.global asm_medDif
.thumb_func
	asm_medDif:
		push {r4-r6}
 8000212:	b470      	push	{r4, r5, r6}

		cbz r0, medDif_end			// Checkear si *e es NULL
 8000214:	b168      	cbz	r0, 8000232 <medDif_end>
		cbz r1, medDif_end			// Checkear si *x es NULL
 8000216:	b161      	cbz	r1, 8000232 <medDif_end>
		cbz r2, medDif_end			// Checkear si *y es NULL
 8000218:	b15a      	cbz	r2, 8000232 <medDif_end>
		cbz r3, medDif_end			// Checkear si longitud es cero
 800021a:	b153      	cbz	r3, 8000232 <medDif_end>

0800021c <medDif_loop>:

	medDif_loop:
		sub r3, #1     			// Decrementar en 1 indice n
 800021c:	f1a3 0301 	sub.w	r3, r3, #1

		ldrsb r4, [r1, r3]			// Cargar siguiente elemento de x
 8000220:	56cc      	ldrsb	r4, [r1, r3]
		ldrsb r5, [r2, r3]			// Cargar siguiente elemento de y
 8000222:	56d5      	ldrsb	r5, [r2, r3]

		sub r6, r4, r5				// Resta x[n]-y[n]
 8000224:	eba4 0605 	sub.w	r6, r4, r5
		asr r6, r6, #1				// Divir entre 2
 8000228:	ea4f 0666 	mov.w	r6, r6, asr #1

		strb r6, [r0, r3]			// Cargar siguiente elemento de e
 800022c:	54c6      	strb	r6, [r0, r3]

		cbz r3, medDif_end			// Si indice n no es 0, repetir el loop
 800022e:	b103      	cbz	r3, 8000232 <medDif_end>
		b medDif_loop
 8000230:	e7f4      	b.n	800021c <medDif_loop>

08000232 <medDif_end>:

	medDif_end:
		pop {r4-r6}
 8000232:	bc70      	pop	{r4, r5, r6}
		bx lr               		// Volver de la función
 8000234:	4770      	bx	lr

08000236 <asm_eco>:
// r7: indice defasado de signal
// **************************************************************************
.global asm_eco
.thumb_func
	asm_eco:
		push {r4-r7}
 8000236:	b4f0      	push	{r4, r5, r6, r7}

		cbz r0, eco_end					// Checkear si *e es NULL
 8000238:	b1b0      	cbz	r0, 8000268 <eco_end>
		cbz r1, eco_end					// Checkear si *x es NULL
 800023a:	b1a9      	cbz	r1, 8000268 <eco_end>
		cbz r2, eco_end					// Checkear si longitud es cero
 800023c:	b1a2      	cbz	r2, 8000268 <eco_end>
		mov r3, #882					// Retardo
 800023e:	f240 3372 	movw	r3, #882	; 0x372

08000242 <eco_loop>:

	eco_loop:
		sub r2, #1     					// Decrementar en 1 indice n
 8000242:	f1a2 0201 	sub.w	r2, r2, #1

		ldrsh r4, [r0, r2, lsl #1]		// Cargar valor actual de signal[]
 8000246:	f930 4012 	ldrsh.w	r4, [r0, r2, lsl #1]
		mov   r6, r4					// Copiar a salida
 800024a:	4626      	mov	r6, r4

		cmp   r2, r3					// Comparar índice <= 882
 800024c:	429a      	cmp	r2, r3
		blt   eco_save
 800024e:	db07      	blt.n	8000260 <eco_save>

		// Con eco
		sub   r7, r2, r3
 8000250:	eba2 0703 	sub.w	r7, r2, r3
		ldrsh r5, [r0, r7, lsl #1] 		// Cargar valor defasado de signal[]
 8000254:	f930 5017 	ldrsh.w	r5, [r0, r7, lsl #1]
		asr   r5, r5, #1				// Dividir valor desfasado entre 2
 8000258:	ea4f 0565 	mov.w	r5, r5, asr #1
		add   r6, r4, r5				// Aplicar eco
 800025c:	eb04 0605 	add.w	r6, r4, r5

08000260 <eco_save>:

	eco_save:
		strh  r6, [r1, r2, lsl #1]		// Guardar el resultado en eco[]
 8000260:	f821 6012 	strh.w	r6, [r1, r2, lsl #1]

		cbz   r2, eco_end				// Si indice no es 0, repetir el loop
 8000264:	b102      	cbz	r2, 8000268 <eco_end>
		b     eco_loop
 8000266:	e7ec      	b.n	8000242 <eco_loop>

08000268 <eco_end>:

	eco_end:
		pop {r4-r7}
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
		bx lr               			// Volver de la función
 800026a:	4770      	bx	lr

0800026c <__aeabi_uldivmod>:
 800026c:	b953      	cbnz	r3, 8000284 <__aeabi_uldivmod+0x18>
 800026e:	b94a      	cbnz	r2, 8000284 <__aeabi_uldivmod+0x18>
 8000270:	2900      	cmp	r1, #0
 8000272:	bf08      	it	eq
 8000274:	2800      	cmpeq	r0, #0
 8000276:	bf1c      	itt	ne
 8000278:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800027c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000280:	f000 b970 	b.w	8000564 <__aeabi_idiv0>
 8000284:	f1ad 0c08 	sub.w	ip, sp, #8
 8000288:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800028c:	f000 f806 	bl	800029c <__udivmoddi4>
 8000290:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000294:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000298:	b004      	add	sp, #16
 800029a:	4770      	bx	lr

0800029c <__udivmoddi4>:
 800029c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a0:	9e08      	ldr	r6, [sp, #32]
 80002a2:	460d      	mov	r5, r1
 80002a4:	4604      	mov	r4, r0
 80002a6:	460f      	mov	r7, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14a      	bne.n	8000342 <__udivmoddi4+0xa6>
 80002ac:	428a      	cmp	r2, r1
 80002ae:	4694      	mov	ip, r2
 80002b0:	d965      	bls.n	800037e <__udivmoddi4+0xe2>
 80002b2:	fab2 f382 	clz	r3, r2
 80002b6:	b143      	cbz	r3, 80002ca <__udivmoddi4+0x2e>
 80002b8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002bc:	f1c3 0220 	rsb	r2, r3, #32
 80002c0:	409f      	lsls	r7, r3
 80002c2:	fa20 f202 	lsr.w	r2, r0, r2
 80002c6:	4317      	orrs	r7, r2
 80002c8:	409c      	lsls	r4, r3
 80002ca:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002ce:	fa1f f58c 	uxth.w	r5, ip
 80002d2:	fbb7 f1fe 	udiv	r1, r7, lr
 80002d6:	0c22      	lsrs	r2, r4, #16
 80002d8:	fb0e 7711 	mls	r7, lr, r1, r7
 80002dc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e0:	fb01 f005 	mul.w	r0, r1, r5
 80002e4:	4290      	cmp	r0, r2
 80002e6:	d90a      	bls.n	80002fe <__udivmoddi4+0x62>
 80002e8:	eb1c 0202 	adds.w	r2, ip, r2
 80002ec:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f0:	f080 811c 	bcs.w	800052c <__udivmoddi4+0x290>
 80002f4:	4290      	cmp	r0, r2
 80002f6:	f240 8119 	bls.w	800052c <__udivmoddi4+0x290>
 80002fa:	3902      	subs	r1, #2
 80002fc:	4462      	add	r2, ip
 80002fe:	1a12      	subs	r2, r2, r0
 8000300:	b2a4      	uxth	r4, r4
 8000302:	fbb2 f0fe 	udiv	r0, r2, lr
 8000306:	fb0e 2210 	mls	r2, lr, r0, r2
 800030a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800030e:	fb00 f505 	mul.w	r5, r0, r5
 8000312:	42a5      	cmp	r5, r4
 8000314:	d90a      	bls.n	800032c <__udivmoddi4+0x90>
 8000316:	eb1c 0404 	adds.w	r4, ip, r4
 800031a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x294>
 8000322:	42a5      	cmp	r5, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x294>
 8000328:	4464      	add	r4, ip
 800032a:	3802      	subs	r0, #2
 800032c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000330:	1b64      	subs	r4, r4, r5
 8000332:	2100      	movs	r1, #0
 8000334:	b11e      	cbz	r6, 800033e <__udivmoddi4+0xa2>
 8000336:	40dc      	lsrs	r4, r3
 8000338:	2300      	movs	r3, #0
 800033a:	e9c6 4300 	strd	r4, r3, [r6]
 800033e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000342:	428b      	cmp	r3, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0xbc>
 8000346:	2e00      	cmp	r6, #0
 8000348:	f000 80ed 	beq.w	8000526 <__udivmoddi4+0x28a>
 800034c:	2100      	movs	r1, #0
 800034e:	e9c6 0500 	strd	r0, r5, [r6]
 8000352:	4608      	mov	r0, r1
 8000354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000358:	fab3 f183 	clz	r1, r3
 800035c:	2900      	cmp	r1, #0
 800035e:	d149      	bne.n	80003f4 <__udivmoddi4+0x158>
 8000360:	42ab      	cmp	r3, r5
 8000362:	d302      	bcc.n	800036a <__udivmoddi4+0xce>
 8000364:	4282      	cmp	r2, r0
 8000366:	f200 80f8 	bhi.w	800055a <__udivmoddi4+0x2be>
 800036a:	1a84      	subs	r4, r0, r2
 800036c:	eb65 0203 	sbc.w	r2, r5, r3
 8000370:	2001      	movs	r0, #1
 8000372:	4617      	mov	r7, r2
 8000374:	2e00      	cmp	r6, #0
 8000376:	d0e2      	beq.n	800033e <__udivmoddi4+0xa2>
 8000378:	e9c6 4700 	strd	r4, r7, [r6]
 800037c:	e7df      	b.n	800033e <__udivmoddi4+0xa2>
 800037e:	b902      	cbnz	r2, 8000382 <__udivmoddi4+0xe6>
 8000380:	deff      	udf	#255	; 0xff
 8000382:	fab2 f382 	clz	r3, r2
 8000386:	2b00      	cmp	r3, #0
 8000388:	f040 8090 	bne.w	80004ac <__udivmoddi4+0x210>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	2101      	movs	r1, #1
 8000398:	fbb2 f5f7 	udiv	r5, r2, r7
 800039c:	fb07 2015 	mls	r0, r7, r5, r2
 80003a0:	0c22      	lsrs	r2, r4, #16
 80003a2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003a6:	fb0e f005 	mul.w	r0, lr, r5
 80003aa:	4290      	cmp	r0, r2
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x124>
 80003ae:	eb1c 0202 	adds.w	r2, ip, r2
 80003b2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x122>
 80003b8:	4290      	cmp	r0, r2
 80003ba:	f200 80cb 	bhi.w	8000554 <__udivmoddi4+0x2b8>
 80003be:	4645      	mov	r5, r8
 80003c0:	1a12      	subs	r2, r2, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb2 f0f7 	udiv	r0, r2, r7
 80003c8:	fb07 2210 	mls	r2, r7, r0, r2
 80003cc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d0:	fb0e fe00 	mul.w	lr, lr, r0
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x14e>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e0:	d202      	bcs.n	80003e8 <__udivmoddi4+0x14c>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	f200 80bb 	bhi.w	800055e <__udivmoddi4+0x2c2>
 80003e8:	4610      	mov	r0, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x98>
 80003f4:	f1c1 0720 	rsb	r7, r1, #32
 80003f8:	408b      	lsls	r3, r1
 80003fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000402:	fa05 f401 	lsl.w	r4, r5, r1
 8000406:	fa20 f307 	lsr.w	r3, r0, r7
 800040a:	40fd      	lsrs	r5, r7
 800040c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000410:	4323      	orrs	r3, r4
 8000412:	fbb5 f8f9 	udiv	r8, r5, r9
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	fb09 5518 	mls	r5, r9, r8, r5
 800041e:	0c1c      	lsrs	r4, r3, #16
 8000420:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000424:	fb08 f50e 	mul.w	r5, r8, lr
 8000428:	42a5      	cmp	r5, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	fa00 f001 	lsl.w	r0, r0, r1
 8000432:	d90b      	bls.n	800044c <__udivmoddi4+0x1b0>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800043c:	f080 8088 	bcs.w	8000550 <__udivmoddi4+0x2b4>
 8000440:	42a5      	cmp	r5, r4
 8000442:	f240 8085 	bls.w	8000550 <__udivmoddi4+0x2b4>
 8000446:	f1a8 0802 	sub.w	r8, r8, #2
 800044a:	4464      	add	r4, ip
 800044c:	1b64      	subs	r4, r4, r5
 800044e:	b29d      	uxth	r5, r3
 8000450:	fbb4 f3f9 	udiv	r3, r4, r9
 8000454:	fb09 4413 	mls	r4, r9, r3, r4
 8000458:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800045c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x1da>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 800046c:	d26c      	bcs.n	8000548 <__udivmoddi4+0x2ac>
 800046e:	45a6      	cmp	lr, r4
 8000470:	d96a      	bls.n	8000548 <__udivmoddi4+0x2ac>
 8000472:	3b02      	subs	r3, #2
 8000474:	4464      	add	r4, ip
 8000476:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047a:	fba3 9502 	umull	r9, r5, r3, r2
 800047e:	eba4 040e 	sub.w	r4, r4, lr
 8000482:	42ac      	cmp	r4, r5
 8000484:	46c8      	mov	r8, r9
 8000486:	46ae      	mov	lr, r5
 8000488:	d356      	bcc.n	8000538 <__udivmoddi4+0x29c>
 800048a:	d053      	beq.n	8000534 <__udivmoddi4+0x298>
 800048c:	b156      	cbz	r6, 80004a4 <__udivmoddi4+0x208>
 800048e:	ebb0 0208 	subs.w	r2, r0, r8
 8000492:	eb64 040e 	sbc.w	r4, r4, lr
 8000496:	fa04 f707 	lsl.w	r7, r4, r7
 800049a:	40ca      	lsrs	r2, r1
 800049c:	40cc      	lsrs	r4, r1
 800049e:	4317      	orrs	r7, r2
 80004a0:	e9c6 7400 	strd	r7, r4, [r6]
 80004a4:	4618      	mov	r0, r3
 80004a6:	2100      	movs	r1, #0
 80004a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ac:	f1c3 0120 	rsb	r1, r3, #32
 80004b0:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b4:	fa20 f201 	lsr.w	r2, r0, r1
 80004b8:	fa25 f101 	lsr.w	r1, r5, r1
 80004bc:	409d      	lsls	r5, r3
 80004be:	432a      	orrs	r2, r5
 80004c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fbb1 f0f7 	udiv	r0, r1, r7
 80004cc:	fb07 1510 	mls	r5, r7, r0, r1
 80004d0:	0c11      	lsrs	r1, r2, #16
 80004d2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004d6:	fb00 f50e 	mul.w	r5, r0, lr
 80004da:	428d      	cmp	r5, r1
 80004dc:	fa04 f403 	lsl.w	r4, r4, r3
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x258>
 80004e2:	eb1c 0101 	adds.w	r1, ip, r1
 80004e6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ea:	d22f      	bcs.n	800054c <__udivmoddi4+0x2b0>
 80004ec:	428d      	cmp	r5, r1
 80004ee:	d92d      	bls.n	800054c <__udivmoddi4+0x2b0>
 80004f0:	3802      	subs	r0, #2
 80004f2:	4461      	add	r1, ip
 80004f4:	1b49      	subs	r1, r1, r5
 80004f6:	b292      	uxth	r2, r2
 80004f8:	fbb1 f5f7 	udiv	r5, r1, r7
 80004fc:	fb07 1115 	mls	r1, r7, r5, r1
 8000500:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000504:	fb05 f10e 	mul.w	r1, r5, lr
 8000508:	4291      	cmp	r1, r2
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x282>
 800050c:	eb1c 0202 	adds.w	r2, ip, r2
 8000510:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000514:	d216      	bcs.n	8000544 <__udivmoddi4+0x2a8>
 8000516:	4291      	cmp	r1, r2
 8000518:	d914      	bls.n	8000544 <__udivmoddi4+0x2a8>
 800051a:	3d02      	subs	r5, #2
 800051c:	4462      	add	r2, ip
 800051e:	1a52      	subs	r2, r2, r1
 8000520:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000524:	e738      	b.n	8000398 <__udivmoddi4+0xfc>
 8000526:	4631      	mov	r1, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e708      	b.n	800033e <__udivmoddi4+0xa2>
 800052c:	4639      	mov	r1, r7
 800052e:	e6e6      	b.n	80002fe <__udivmoddi4+0x62>
 8000530:	4610      	mov	r0, r2
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x90>
 8000534:	4548      	cmp	r0, r9
 8000536:	d2a9      	bcs.n	800048c <__udivmoddi4+0x1f0>
 8000538:	ebb9 0802 	subs.w	r8, r9, r2
 800053c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000540:	3b01      	subs	r3, #1
 8000542:	e7a3      	b.n	800048c <__udivmoddi4+0x1f0>
 8000544:	4645      	mov	r5, r8
 8000546:	e7ea      	b.n	800051e <__udivmoddi4+0x282>
 8000548:	462b      	mov	r3, r5
 800054a:	e794      	b.n	8000476 <__udivmoddi4+0x1da>
 800054c:	4640      	mov	r0, r8
 800054e:	e7d1      	b.n	80004f4 <__udivmoddi4+0x258>
 8000550:	46d0      	mov	r8, sl
 8000552:	e77b      	b.n	800044c <__udivmoddi4+0x1b0>
 8000554:	3d02      	subs	r5, #2
 8000556:	4462      	add	r2, ip
 8000558:	e732      	b.n	80003c0 <__udivmoddi4+0x124>
 800055a:	4608      	mov	r0, r1
 800055c:	e70a      	b.n	8000374 <__udivmoddi4+0xd8>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e742      	b.n	80003ea <__udivmoddi4+0x14e>

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800056c:	f5ad 4d80 	sub.w	sp, sp, #16384	; 0x4000
 8000570:	b08e      	sub	sp, #56	; 0x38
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 f9b8 	bl	80008e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f8c2 	bl	8000700 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */

  int16_t vecIn[] = {1, -2, 3, -4, 5};
 800057c:	4a5d      	ldr	r2, [pc, #372]	; (80006f4 <main+0x18c>)
 800057e:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8000582:	f103 0310 	add.w	r3, r3, #16
 8000586:	ca07      	ldmia	r2, {r0, r1, r2}
 8000588:	c303      	stmia	r3!, {r0, r1}
 800058a:	801a      	strh	r2, [r3, #0]
  uint32_t longitud1 = sizeof(vecIn) / sizeof(vecIn[0]);
 800058c:	2305      	movs	r3, #5
 800058e:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 8000592:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8000596:	6013      	str	r3, [r2, #0]
  uint32_t potencia = asm_potencia(vecIn, longitud1);
 8000598:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 800059c:	f103 0310 	add.w	r3, r3, #16
 80005a0:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 80005a4:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80005a8:	6811      	ldr	r1, [r2, #0]
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff fe1e 	bl	80001ec <asm_potencia>
 80005b0:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 80005b4:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80005b8:	6018      	str	r0, [r3, #0]
  (void)potencia;

  int8_t x[] = {10, 20, 30, 40, 50};
 80005ba:	4a4f      	ldr	r2, [pc, #316]	; (80006f8 <main+0x190>)
 80005bc:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 80005c0:	f103 0308 	add.w	r3, r3, #8
 80005c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005c8:	6018      	str	r0, [r3, #0]
 80005ca:	3304      	adds	r3, #4
 80005cc:	7019      	strb	r1, [r3, #0]
  int8_t y[] = {5, 15, 25, 35, 45};
 80005ce:	4a4b      	ldr	r2, [pc, #300]	; (80006fc <main+0x194>)
 80005d0:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 80005d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005d8:	6018      	str	r0, [r3, #0]
 80005da:	3304      	adds	r3, #4
 80005dc:	7019      	strb	r1, [r3, #0]
  uint16_t longitud2 = sizeof(x) / sizeof(x[0]);
 80005de:	2305      	movs	r3, #5
 80005e0:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 80005e4:	f102 022a 	add.w	r2, r2, #42	; 0x2a
 80005e8:	8013      	strh	r3, [r2, #0]
  int8_t e[longitud2];
 80005ea:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 80005ee:	f103 032a 	add.w	r3, r3, #42	; 0x2a
 80005f2:	8819      	ldrh	r1, [r3, #0]
 80005f4:	460b      	mov	r3, r1
 80005f6:	3b01      	subs	r3, #1
 80005f8:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 80005fc:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8000600:	6013      	str	r3, [r2, #0]
 8000602:	b28b      	uxth	r3, r1
 8000604:	2200      	movs	r2, #0
 8000606:	4698      	mov	r8, r3
 8000608:	4691      	mov	r9, r2
 800060a:	f04f 0200 	mov.w	r2, #0
 800060e:	f04f 0300 	mov.w	r3, #0
 8000612:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000616:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800061a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800061e:	b28b      	uxth	r3, r1
 8000620:	2200      	movs	r2, #0
 8000622:	461c      	mov	r4, r3
 8000624:	4615      	mov	r5, r2
 8000626:	f04f 0200 	mov.w	r2, #0
 800062a:	f04f 0300 	mov.w	r3, #0
 800062e:	00eb      	lsls	r3, r5, #3
 8000630:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000634:	00e2      	lsls	r2, r4, #3
 8000636:	460b      	mov	r3, r1
 8000638:	3307      	adds	r3, #7
 800063a:	08db      	lsrs	r3, r3, #3
 800063c:	00db      	lsls	r3, r3, #3
 800063e:	ebad 0d03 	sub.w	sp, sp, r3
 8000642:	466b      	mov	r3, sp
 8000644:	3300      	adds	r3, #0
 8000646:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 800064a:	f102 0220 	add.w	r2, r2, #32
 800064e:	6013      	str	r3, [r2, #0]

  asm_medDif(e, x, y, longitud2);
 8000650:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8000654:	f103 032a 	add.w	r3, r3, #42	; 0x2a
 8000658:	881b      	ldrh	r3, [r3, #0]
 800065a:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 800065e:	f507 4180 	add.w	r1, r7, #16384	; 0x4000
 8000662:	f101 0108 	add.w	r1, r1, #8
 8000666:	f507 4080 	add.w	r0, r7, #16384	; 0x4000
 800066a:	f100 0020 	add.w	r0, r0, #32
 800066e:	6800      	ldr	r0, [r0, #0]
 8000670:	f7ff fdcf 	bl	8000212 <asm_medDif>

  //int16_t signal[] = {100, 200, 300, 400, 500, 600, 700, 800, 900, 1000};
  int16_t signal[4096];
  for(uint16_t i = 0u; i < 4096u; i++)
 8000674:	2300      	movs	r3, #0
 8000676:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 800067a:	f102 0236 	add.w	r2, r2, #54	; 0x36
 800067e:	8013      	strh	r3, [r2, #0]
 8000680:	e018      	b.n	80006b4 <main+0x14c>
  {
	  signal[i] = 0x10;
 8000682:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8000686:	f103 0336 	add.w	r3, r3, #54	; 0x36
 800068a:	881b      	ldrh	r3, [r3, #0]
 800068c:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000690:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8000694:	005b      	lsls	r3, r3, #1
 8000696:	4413      	add	r3, r2
 8000698:	2210      	movs	r2, #16
 800069a:	f823 2c38 	strh.w	r2, [r3, #-56]
  for(uint16_t i = 0u; i < 4096u; i++)
 800069e:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 80006a2:	f103 0336 	add.w	r3, r3, #54	; 0x36
 80006a6:	881b      	ldrh	r3, [r3, #0]
 80006a8:	3301      	adds	r3, #1
 80006aa:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 80006ae:	f102 0236 	add.w	r2, r2, #54	; 0x36
 80006b2:	8013      	strh	r3, [r2, #0]
 80006b4:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 80006b8:	f103 0336 	add.w	r3, r3, #54	; 0x36
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80006c2:	d3de      	bcc.n	8000682 <main+0x11a>
  }
  uint32_t longitud3 = sizeof(signal) / sizeof(signal[0]);
 80006c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c8:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 80006cc:	f102 021c 	add.w	r2, r2, #28
 80006d0:	6013      	str	r3, [r2, #0]
  int16_t eco[4096];

  asm_eco(signal, eco, longitud3);
 80006d2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80006d6:	3938      	subs	r1, #56	; 0x38
 80006d8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80006dc:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80006e0:	3b38      	subs	r3, #56	; 0x38
 80006e2:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 80006e6:	f102 021c 	add.w	r2, r2, #28
 80006ea:	6812      	ldr	r2, [r2, #0]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff fda2 	bl	8000236 <asm_eco>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <main+0x18a>
 80006f4:	08001450 	.word	0x08001450
 80006f8:	0800145c 	.word	0x0800145c
 80006fc:	08001464 	.word	0x08001464

08000700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b094      	sub	sp, #80	; 0x50
 8000704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000706:	f107 0320 	add.w	r3, r7, #32
 800070a:	2230      	movs	r2, #48	; 0x30
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f000 fe66 	bl	80013e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000724:	2300      	movs	r3, #0
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	4b23      	ldr	r3, [pc, #140]	; (80007b8 <SystemClock_Config+0xb8>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072c:	4a22      	ldr	r2, [pc, #136]	; (80007b8 <SystemClock_Config+0xb8>)
 800072e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000732:	6413      	str	r3, [r2, #64]	; 0x40
 8000734:	4b20      	ldr	r3, [pc, #128]	; (80007b8 <SystemClock_Config+0xb8>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000740:	2300      	movs	r3, #0
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <SystemClock_Config+0xbc>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800074c:	4a1b      	ldr	r2, [pc, #108]	; (80007bc <SystemClock_Config+0xbc>)
 800074e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000752:	6013      	str	r3, [r2, #0]
 8000754:	4b19      	ldr	r3, [pc, #100]	; (80007bc <SystemClock_Config+0xbc>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000760:	2302      	movs	r3, #2
 8000762:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000764:	2301      	movs	r3, #1
 8000766:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000768:	2310      	movs	r3, #16
 800076a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800076c:	2300      	movs	r3, #0
 800076e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000770:	f107 0320 	add.w	r3, r7, #32
 8000774:	4618      	mov	r0, r3
 8000776:	f000 fa0f 	bl	8000b98 <HAL_RCC_OscConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000780:	f000 f81e 	bl	80007c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000784:	230f      	movs	r3, #15
 8000786:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000788:	2300      	movs	r3, #0
 800078a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 fc72 	bl	8001088 <HAL_RCC_ClockConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007aa:	f000 f809 	bl	80007c0 <Error_Handler>
  }
}
 80007ae:	bf00      	nop
 80007b0:	3750      	adds	r7, #80	; 0x50
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40007000 	.word	0x40007000

080007c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c4:	b672      	cpsid	i
}
 80007c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <Error_Handler+0x8>
	...

080007cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <HAL_MspInit+0x4c>)
 80007d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007da:	4a0f      	ldr	r2, [pc, #60]	; (8000818 <HAL_MspInit+0x4c>)
 80007dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e0:	6453      	str	r3, [r2, #68]	; 0x44
 80007e2:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <HAL_MspInit+0x4c>)
 80007e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	603b      	str	r3, [r7, #0]
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <HAL_MspInit+0x4c>)
 80007f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f6:	4a08      	ldr	r2, [pc, #32]	; (8000818 <HAL_MspInit+0x4c>)
 80007f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007fc:	6413      	str	r3, [r2, #64]	; 0x40
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <HAL_MspInit+0x4c>)
 8000800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080a:	bf00      	nop
 800080c:	370c      	adds	r7, #12
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	40023800 	.word	0x40023800

0800081c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000820:	e7fe      	b.n	8000820 <NMI_Handler+0x4>

08000822 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000826:	e7fe      	b.n	8000826 <HardFault_Handler+0x4>

08000828 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800082c:	e7fe      	b.n	800082c <MemManage_Handler+0x4>

0800082e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000832:	e7fe      	b.n	8000832 <BusFault_Handler+0x4>

08000834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <UsageFault_Handler+0x4>

0800083a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr

08000856 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000868:	f000 f890 	bl	800098c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}

08000870 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <SystemInit+0x20>)
 8000876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800087a:	4a05      	ldr	r2, [pc, #20]	; (8000890 <SystemInit+0x20>)
 800087c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000880:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000894:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000898:	f7ff ffea 	bl	8000870 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800089c:	480c      	ldr	r0, [pc, #48]	; (80008d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800089e:	490d      	ldr	r1, [pc, #52]	; (80008d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008a0:	4a0d      	ldr	r2, [pc, #52]	; (80008d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a4:	e002      	b.n	80008ac <LoopCopyDataInit>

080008a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008aa:	3304      	adds	r3, #4

080008ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b0:	d3f9      	bcc.n	80008a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008b2:	4a0a      	ldr	r2, [pc, #40]	; (80008dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008b4:	4c0a      	ldr	r4, [pc, #40]	; (80008e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b8:	e001      	b.n	80008be <LoopFillZerobss>

080008ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008bc:	3204      	adds	r2, #4

080008be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c0:	d3fb      	bcc.n	80008ba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80008c2:	f000 fd95 	bl	80013f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008c6:	f7ff fe4f 	bl	8000568 <main>
  bx  lr    
 80008ca:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80008cc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80008d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008d8:	0800148c 	.word	0x0800148c
  ldr r2, =_sbss
 80008dc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008e0:	2000002c 	.word	0x2000002c

080008e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008e4:	e7fe      	b.n	80008e4 <ADC_IRQHandler>
	...

080008e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008ec:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <HAL_Init+0x40>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a0d      	ldr	r2, [pc, #52]	; (8000928 <HAL_Init+0x40>)
 80008f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008f8:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <HAL_Init+0x40>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a0a      	ldr	r2, [pc, #40]	; (8000928 <HAL_Init+0x40>)
 80008fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000902:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000904:	4b08      	ldr	r3, [pc, #32]	; (8000928 <HAL_Init+0x40>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a07      	ldr	r2, [pc, #28]	; (8000928 <HAL_Init+0x40>)
 800090a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800090e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000910:	2003      	movs	r0, #3
 8000912:	f000 f90d 	bl	8000b30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000916:	200f      	movs	r0, #15
 8000918:	f000 f808 	bl	800092c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800091c:	f7ff ff56 	bl	80007cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000920:	2300      	movs	r3, #0
}
 8000922:	4618      	mov	r0, r3
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40023c00 	.word	0x40023c00

0800092c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <HAL_InitTick+0x54>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <HAL_InitTick+0x58>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	4619      	mov	r1, r3
 800093e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000942:	fbb3 f3f1 	udiv	r3, r3, r1
 8000946:	fbb2 f3f3 	udiv	r3, r2, r3
 800094a:	4618      	mov	r0, r3
 800094c:	f000 f917 	bl	8000b7e <HAL_SYSTICK_Config>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000956:	2301      	movs	r3, #1
 8000958:	e00e      	b.n	8000978 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2b0f      	cmp	r3, #15
 800095e:	d80a      	bhi.n	8000976 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000960:	2200      	movs	r2, #0
 8000962:	6879      	ldr	r1, [r7, #4]
 8000964:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000968:	f000 f8ed 	bl	8000b46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800096c:	4a06      	ldr	r2, [pc, #24]	; (8000988 <HAL_InitTick+0x5c>)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000972:	2300      	movs	r3, #0
 8000974:	e000      	b.n	8000978 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000976:	2301      	movs	r3, #1
}
 8000978:	4618      	mov	r0, r3
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000000 	.word	0x20000000
 8000984:	20000008 	.word	0x20000008
 8000988:	20000004 	.word	0x20000004

0800098c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <HAL_IncTick+0x20>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	461a      	mov	r2, r3
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <HAL_IncTick+0x24>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4413      	add	r3, r2
 800099c:	4a04      	ldr	r2, [pc, #16]	; (80009b0 <HAL_IncTick+0x24>)
 800099e:	6013      	str	r3, [r2, #0]
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	20000008 	.word	0x20000008
 80009b0:	20000028 	.word	0x20000028

080009b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  return uwTick;
 80009b8:	4b03      	ldr	r3, [pc, #12]	; (80009c8 <HAL_GetTick+0x14>)
 80009ba:	681b      	ldr	r3, [r3, #0]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	20000028 	.word	0x20000028

080009cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	f003 0307 	and.w	r3, r3, #7
 80009da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <__NVIC_SetPriorityGrouping+0x44>)
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009e2:	68ba      	ldr	r2, [r7, #8]
 80009e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009e8:	4013      	ands	r3, r2
 80009ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009fe:	4a04      	ldr	r2, [pc, #16]	; (8000a10 <__NVIC_SetPriorityGrouping+0x44>)
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	60d3      	str	r3, [r2, #12]
}
 8000a04:	bf00      	nop
 8000a06:	3714      	adds	r7, #20
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a18:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <__NVIC_GetPriorityGrouping+0x18>)
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	0a1b      	lsrs	r3, r3, #8
 8000a1e:	f003 0307 	and.w	r3, r3, #7
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	6039      	str	r1, [r7, #0]
 8000a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	db0a      	blt.n	8000a5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	b2da      	uxtb	r2, r3
 8000a48:	490c      	ldr	r1, [pc, #48]	; (8000a7c <__NVIC_SetPriority+0x4c>)
 8000a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4e:	0112      	lsls	r2, r2, #4
 8000a50:	b2d2      	uxtb	r2, r2
 8000a52:	440b      	add	r3, r1
 8000a54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a58:	e00a      	b.n	8000a70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	b2da      	uxtb	r2, r3
 8000a5e:	4908      	ldr	r1, [pc, #32]	; (8000a80 <__NVIC_SetPriority+0x50>)
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	f003 030f 	and.w	r3, r3, #15
 8000a66:	3b04      	subs	r3, #4
 8000a68:	0112      	lsls	r2, r2, #4
 8000a6a:	b2d2      	uxtb	r2, r2
 8000a6c:	440b      	add	r3, r1
 8000a6e:	761a      	strb	r2, [r3, #24]
}
 8000a70:	bf00      	nop
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	e000e100 	.word	0xe000e100
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b089      	sub	sp, #36	; 0x24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	f003 0307 	and.w	r3, r3, #7
 8000a96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a98:	69fb      	ldr	r3, [r7, #28]
 8000a9a:	f1c3 0307 	rsb	r3, r3, #7
 8000a9e:	2b04      	cmp	r3, #4
 8000aa0:	bf28      	it	cs
 8000aa2:	2304      	movcs	r3, #4
 8000aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	3304      	adds	r3, #4
 8000aaa:	2b06      	cmp	r3, #6
 8000aac:	d902      	bls.n	8000ab4 <NVIC_EncodePriority+0x30>
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	3b03      	subs	r3, #3
 8000ab2:	e000      	b.n	8000ab6 <NVIC_EncodePriority+0x32>
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000abc:	69bb      	ldr	r3, [r7, #24]
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	43da      	mvns	r2, r3
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	401a      	ands	r2, r3
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000acc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad6:	43d9      	mvns	r1, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000adc:	4313      	orrs	r3, r2
         );
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3724      	adds	r7, #36	; 0x24
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
	...

08000aec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3b01      	subs	r3, #1
 8000af8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000afc:	d301      	bcc.n	8000b02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000afe:	2301      	movs	r3, #1
 8000b00:	e00f      	b.n	8000b22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b02:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <SysTick_Config+0x40>)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3b01      	subs	r3, #1
 8000b08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b0a:	210f      	movs	r1, #15
 8000b0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b10:	f7ff ff8e 	bl	8000a30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b14:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <SysTick_Config+0x40>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b1a:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <SysTick_Config+0x40>)
 8000b1c:	2207      	movs	r2, #7
 8000b1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	e000e010 	.word	0xe000e010

08000b30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f7ff ff47 	bl	80009cc <__NVIC_SetPriorityGrouping>
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b086      	sub	sp, #24
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	60b9      	str	r1, [r7, #8]
 8000b50:	607a      	str	r2, [r7, #4]
 8000b52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b58:	f7ff ff5c 	bl	8000a14 <__NVIC_GetPriorityGrouping>
 8000b5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	68b9      	ldr	r1, [r7, #8]
 8000b62:	6978      	ldr	r0, [r7, #20]
 8000b64:	f7ff ff8e 	bl	8000a84 <NVIC_EncodePriority>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b6e:	4611      	mov	r1, r2
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff ff5d 	bl	8000a30 <__NVIC_SetPriority>
}
 8000b76:	bf00      	nop
 8000b78:	3718      	adds	r7, #24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f7ff ffb0 	bl	8000aec <SysTick_Config>
 8000b8c:	4603      	mov	r3, r0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
	...

08000b98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d101      	bne.n	8000baa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e267      	b.n	800107a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d075      	beq.n	8000ca2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bb6:	4b88      	ldr	r3, [pc, #544]	; (8000dd8 <HAL_RCC_OscConfig+0x240>)
 8000bb8:	689b      	ldr	r3, [r3, #8]
 8000bba:	f003 030c 	and.w	r3, r3, #12
 8000bbe:	2b04      	cmp	r3, #4
 8000bc0:	d00c      	beq.n	8000bdc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bc2:	4b85      	ldr	r3, [pc, #532]	; (8000dd8 <HAL_RCC_OscConfig+0x240>)
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bca:	2b08      	cmp	r3, #8
 8000bcc:	d112      	bne.n	8000bf4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bce:	4b82      	ldr	r3, [pc, #520]	; (8000dd8 <HAL_RCC_OscConfig+0x240>)
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000bda:	d10b      	bne.n	8000bf4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bdc:	4b7e      	ldr	r3, [pc, #504]	; (8000dd8 <HAL_RCC_OscConfig+0x240>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d05b      	beq.n	8000ca0 <HAL_RCC_OscConfig+0x108>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d157      	bne.n	8000ca0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	e242      	b.n	800107a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bfc:	d106      	bne.n	8000c0c <HAL_RCC_OscConfig+0x74>
 8000bfe:	4b76      	ldr	r3, [pc, #472]	; (8000dd8 <HAL_RCC_OscConfig+0x240>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a75      	ldr	r2, [pc, #468]	; (8000dd8 <HAL_RCC_OscConfig+0x240>)
 8000c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c08:	6013      	str	r3, [r2, #0]
 8000c0a:	e01d      	b.n	8000c48 <HAL_RCC_OscConfig+0xb0>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c14:	d10c      	bne.n	8000c30 <HAL_RCC_OscConfig+0x98>
 8000c16:	4b70      	ldr	r3, [pc, #448]	; (8000dd8 <HAL_RCC_OscConfig+0x240>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a6f      	ldr	r2, [pc, #444]	; (8000dd8 <HAL_RCC_OscConfig+0x240>)
 8000c1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c20:	6013      	str	r3, [r2, #0]
 8000c22:	4b6d      	ldr	r3, [pc, #436]	; (8000dd8 <HAL_RCC_OscConfig+0x240>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a6c      	ldr	r2, [pc, #432]	; (8000dd8 <HAL_RCC_OscConfig+0x240>)
 8000c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c2c:	6013      	str	r3, [r2, #0]
 8000c2e:	e00b      	b.n	8000c48 <HAL_RCC_OscConfig+0xb0>
 8000c30:	4b69      	ldr	r3, [pc, #420]	; (8000dd8 <HAL_RCC_OscConfig+0x240>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a68      	ldr	r2, [pc, #416]	; (8000dd8 <HAL_RCC_OscConfig+0x240>)
 8000c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c3a:	6013      	str	r3, [r2, #0]
 8000c3c:	4b66      	ldr	r3, [pc, #408]	; (8000dd8 <HAL_RCC_OscConfig+0x240>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a65      	ldr	r2, [pc, #404]	; (8000dd8 <HAL_RCC_OscConfig+0x240>)
 8000c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d013      	beq.n	8000c78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c50:	f7ff feb0 	bl	80009b4 <HAL_GetTick>
 8000c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c56:	e008      	b.n	8000c6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c58:	f7ff feac 	bl	80009b4 <HAL_GetTick>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	2b64      	cmp	r3, #100	; 0x64
 8000c64:	d901      	bls.n	8000c6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000c66:	2303      	movs	r3, #3
 8000c68:	e207      	b.n	800107a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c6a:	4b5b      	ldr	r3, [pc, #364]	; (8000dd8 <HAL_RCC_OscConfig+0x240>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d0f0      	beq.n	8000c58 <HAL_RCC_OscConfig+0xc0>
 8000c76:	e014      	b.n	8000ca2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c78:	f7ff fe9c 	bl	80009b4 <HAL_GetTick>
 8000c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c7e:	e008      	b.n	8000c92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c80:	f7ff fe98 	bl	80009b4 <HAL_GetTick>
 8000c84:	4602      	mov	r2, r0
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	2b64      	cmp	r3, #100	; 0x64
 8000c8c:	d901      	bls.n	8000c92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	e1f3      	b.n	800107a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c92:	4b51      	ldr	r3, [pc, #324]	; (8000dd8 <HAL_RCC_OscConfig+0x240>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d1f0      	bne.n	8000c80 <HAL_RCC_OscConfig+0xe8>
 8000c9e:	e000      	b.n	8000ca2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f003 0302 	and.w	r3, r3, #2
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d063      	beq.n	8000d76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000cae:	4b4a      	ldr	r3, [pc, #296]	; (8000dd8 <HAL_RCC_OscConfig+0x240>)
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	f003 030c 	and.w	r3, r3, #12
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d00b      	beq.n	8000cd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cba:	4b47      	ldr	r3, [pc, #284]	; (8000dd8 <HAL_RCC_OscConfig+0x240>)
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000cc2:	2b08      	cmp	r3, #8
 8000cc4:	d11c      	bne.n	8000d00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cc6:	4b44      	ldr	r3, [pc, #272]	; (8000dd8 <HAL_RCC_OscConfig+0x240>)
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d116      	bne.n	8000d00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cd2:	4b41      	ldr	r3, [pc, #260]	; (8000dd8 <HAL_RCC_OscConfig+0x240>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f003 0302 	and.w	r3, r3, #2
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d005      	beq.n	8000cea <HAL_RCC_OscConfig+0x152>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	68db      	ldr	r3, [r3, #12]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d001      	beq.n	8000cea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e1c7      	b.n	800107a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cea:	4b3b      	ldr	r3, [pc, #236]	; (8000dd8 <HAL_RCC_OscConfig+0x240>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	691b      	ldr	r3, [r3, #16]
 8000cf6:	00db      	lsls	r3, r3, #3
 8000cf8:	4937      	ldr	r1, [pc, #220]	; (8000dd8 <HAL_RCC_OscConfig+0x240>)
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cfe:	e03a      	b.n	8000d76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d020      	beq.n	8000d4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d08:	4b34      	ldr	r3, [pc, #208]	; (8000ddc <HAL_RCC_OscConfig+0x244>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d0e:	f7ff fe51 	bl	80009b4 <HAL_GetTick>
 8000d12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d14:	e008      	b.n	8000d28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d16:	f7ff fe4d 	bl	80009b4 <HAL_GetTick>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	1ad3      	subs	r3, r2, r3
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d901      	bls.n	8000d28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000d24:	2303      	movs	r3, #3
 8000d26:	e1a8      	b.n	800107a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d28:	4b2b      	ldr	r3, [pc, #172]	; (8000dd8 <HAL_RCC_OscConfig+0x240>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f003 0302 	and.w	r3, r3, #2
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d0f0      	beq.n	8000d16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d34:	4b28      	ldr	r3, [pc, #160]	; (8000dd8 <HAL_RCC_OscConfig+0x240>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	691b      	ldr	r3, [r3, #16]
 8000d40:	00db      	lsls	r3, r3, #3
 8000d42:	4925      	ldr	r1, [pc, #148]	; (8000dd8 <HAL_RCC_OscConfig+0x240>)
 8000d44:	4313      	orrs	r3, r2
 8000d46:	600b      	str	r3, [r1, #0]
 8000d48:	e015      	b.n	8000d76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d4a:	4b24      	ldr	r3, [pc, #144]	; (8000ddc <HAL_RCC_OscConfig+0x244>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d50:	f7ff fe30 	bl	80009b4 <HAL_GetTick>
 8000d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d56:	e008      	b.n	8000d6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d58:	f7ff fe2c 	bl	80009b4 <HAL_GetTick>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	d901      	bls.n	8000d6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000d66:	2303      	movs	r3, #3
 8000d68:	e187      	b.n	800107a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d6a:	4b1b      	ldr	r3, [pc, #108]	; (8000dd8 <HAL_RCC_OscConfig+0x240>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f003 0302 	and.w	r3, r3, #2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d1f0      	bne.n	8000d58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f003 0308 	and.w	r3, r3, #8
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d036      	beq.n	8000df0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	695b      	ldr	r3, [r3, #20]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d016      	beq.n	8000db8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d8a:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <HAL_RCC_OscConfig+0x248>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d90:	f7ff fe10 	bl	80009b4 <HAL_GetTick>
 8000d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d96:	e008      	b.n	8000daa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d98:	f7ff fe0c 	bl	80009b4 <HAL_GetTick>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d901      	bls.n	8000daa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000da6:	2303      	movs	r3, #3
 8000da8:	e167      	b.n	800107a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <HAL_RCC_OscConfig+0x240>)
 8000dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d0f0      	beq.n	8000d98 <HAL_RCC_OscConfig+0x200>
 8000db6:	e01b      	b.n	8000df0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000db8:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <HAL_RCC_OscConfig+0x248>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dbe:	f7ff fdf9 	bl	80009b4 <HAL_GetTick>
 8000dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dc4:	e00e      	b.n	8000de4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dc6:	f7ff fdf5 	bl	80009b4 <HAL_GetTick>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	1ad3      	subs	r3, r2, r3
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d907      	bls.n	8000de4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	e150      	b.n	800107a <HAL_RCC_OscConfig+0x4e2>
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	42470000 	.word	0x42470000
 8000de0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000de4:	4b88      	ldr	r3, [pc, #544]	; (8001008 <HAL_RCC_OscConfig+0x470>)
 8000de6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000de8:	f003 0302 	and.w	r3, r3, #2
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1ea      	bne.n	8000dc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f003 0304 	and.w	r3, r3, #4
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	f000 8097 	beq.w	8000f2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e02:	4b81      	ldr	r3, [pc, #516]	; (8001008 <HAL_RCC_OscConfig+0x470>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d10f      	bne.n	8000e2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	4b7d      	ldr	r3, [pc, #500]	; (8001008 <HAL_RCC_OscConfig+0x470>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e16:	4a7c      	ldr	r2, [pc, #496]	; (8001008 <HAL_RCC_OscConfig+0x470>)
 8000e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1e:	4b7a      	ldr	r3, [pc, #488]	; (8001008 <HAL_RCC_OscConfig+0x470>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e2e:	4b77      	ldr	r3, [pc, #476]	; (800100c <HAL_RCC_OscConfig+0x474>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d118      	bne.n	8000e6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e3a:	4b74      	ldr	r3, [pc, #464]	; (800100c <HAL_RCC_OscConfig+0x474>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a73      	ldr	r2, [pc, #460]	; (800100c <HAL_RCC_OscConfig+0x474>)
 8000e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e46:	f7ff fdb5 	bl	80009b4 <HAL_GetTick>
 8000e4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e4c:	e008      	b.n	8000e60 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e4e:	f7ff fdb1 	bl	80009b4 <HAL_GetTick>
 8000e52:	4602      	mov	r2, r0
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d901      	bls.n	8000e60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	e10c      	b.n	800107a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e60:	4b6a      	ldr	r3, [pc, #424]	; (800100c <HAL_RCC_OscConfig+0x474>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d0f0      	beq.n	8000e4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d106      	bne.n	8000e82 <HAL_RCC_OscConfig+0x2ea>
 8000e74:	4b64      	ldr	r3, [pc, #400]	; (8001008 <HAL_RCC_OscConfig+0x470>)
 8000e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e78:	4a63      	ldr	r2, [pc, #396]	; (8001008 <HAL_RCC_OscConfig+0x470>)
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
 8000e7e:	6713      	str	r3, [r2, #112]	; 0x70
 8000e80:	e01c      	b.n	8000ebc <HAL_RCC_OscConfig+0x324>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	2b05      	cmp	r3, #5
 8000e88:	d10c      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x30c>
 8000e8a:	4b5f      	ldr	r3, [pc, #380]	; (8001008 <HAL_RCC_OscConfig+0x470>)
 8000e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e8e:	4a5e      	ldr	r2, [pc, #376]	; (8001008 <HAL_RCC_OscConfig+0x470>)
 8000e90:	f043 0304 	orr.w	r3, r3, #4
 8000e94:	6713      	str	r3, [r2, #112]	; 0x70
 8000e96:	4b5c      	ldr	r3, [pc, #368]	; (8001008 <HAL_RCC_OscConfig+0x470>)
 8000e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e9a:	4a5b      	ldr	r2, [pc, #364]	; (8001008 <HAL_RCC_OscConfig+0x470>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	6713      	str	r3, [r2, #112]	; 0x70
 8000ea2:	e00b      	b.n	8000ebc <HAL_RCC_OscConfig+0x324>
 8000ea4:	4b58      	ldr	r3, [pc, #352]	; (8001008 <HAL_RCC_OscConfig+0x470>)
 8000ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ea8:	4a57      	ldr	r2, [pc, #348]	; (8001008 <HAL_RCC_OscConfig+0x470>)
 8000eaa:	f023 0301 	bic.w	r3, r3, #1
 8000eae:	6713      	str	r3, [r2, #112]	; 0x70
 8000eb0:	4b55      	ldr	r3, [pc, #340]	; (8001008 <HAL_RCC_OscConfig+0x470>)
 8000eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eb4:	4a54      	ldr	r2, [pc, #336]	; (8001008 <HAL_RCC_OscConfig+0x470>)
 8000eb6:	f023 0304 	bic.w	r3, r3, #4
 8000eba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d015      	beq.n	8000ef0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ec4:	f7ff fd76 	bl	80009b4 <HAL_GetTick>
 8000ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000eca:	e00a      	b.n	8000ee2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ecc:	f7ff fd72 	bl	80009b4 <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d901      	bls.n	8000ee2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	e0cb      	b.n	800107a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ee2:	4b49      	ldr	r3, [pc, #292]	; (8001008 <HAL_RCC_OscConfig+0x470>)
 8000ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d0ee      	beq.n	8000ecc <HAL_RCC_OscConfig+0x334>
 8000eee:	e014      	b.n	8000f1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ef0:	f7ff fd60 	bl	80009b4 <HAL_GetTick>
 8000ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ef6:	e00a      	b.n	8000f0e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ef8:	f7ff fd5c 	bl	80009b4 <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d901      	bls.n	8000f0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e0b5      	b.n	800107a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f0e:	4b3e      	ldr	r3, [pc, #248]	; (8001008 <HAL_RCC_OscConfig+0x470>)
 8000f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d1ee      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f1a:	7dfb      	ldrb	r3, [r7, #23]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d105      	bne.n	8000f2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f20:	4b39      	ldr	r3, [pc, #228]	; (8001008 <HAL_RCC_OscConfig+0x470>)
 8000f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f24:	4a38      	ldr	r2, [pc, #224]	; (8001008 <HAL_RCC_OscConfig+0x470>)
 8000f26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f2a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	f000 80a1 	beq.w	8001078 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f36:	4b34      	ldr	r3, [pc, #208]	; (8001008 <HAL_RCC_OscConfig+0x470>)
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	f003 030c 	and.w	r3, r3, #12
 8000f3e:	2b08      	cmp	r3, #8
 8000f40:	d05c      	beq.n	8000ffc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	699b      	ldr	r3, [r3, #24]
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d141      	bne.n	8000fce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f4a:	4b31      	ldr	r3, [pc, #196]	; (8001010 <HAL_RCC_OscConfig+0x478>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f50:	f7ff fd30 	bl	80009b4 <HAL_GetTick>
 8000f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f56:	e008      	b.n	8000f6a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f58:	f7ff fd2c 	bl	80009b4 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d901      	bls.n	8000f6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8000f66:	2303      	movs	r3, #3
 8000f68:	e087      	b.n	800107a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f6a:	4b27      	ldr	r3, [pc, #156]	; (8001008 <HAL_RCC_OscConfig+0x470>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d1f0      	bne.n	8000f58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	69da      	ldr	r2, [r3, #28]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6a1b      	ldr	r3, [r3, #32]
 8000f7e:	431a      	orrs	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f84:	019b      	lsls	r3, r3, #6
 8000f86:	431a      	orrs	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f8c:	085b      	lsrs	r3, r3, #1
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	041b      	lsls	r3, r3, #16
 8000f92:	431a      	orrs	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f98:	061b      	lsls	r3, r3, #24
 8000f9a:	491b      	ldr	r1, [pc, #108]	; (8001008 <HAL_RCC_OscConfig+0x470>)
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <HAL_RCC_OscConfig+0x478>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa6:	f7ff fd05 	bl	80009b4 <HAL_GetTick>
 8000faa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fac:	e008      	b.n	8000fc0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fae:	f7ff fd01 	bl	80009b4 <HAL_GetTick>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d901      	bls.n	8000fc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	e05c      	b.n	800107a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fc0:	4b11      	ldr	r3, [pc, #68]	; (8001008 <HAL_RCC_OscConfig+0x470>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d0f0      	beq.n	8000fae <HAL_RCC_OscConfig+0x416>
 8000fcc:	e054      	b.n	8001078 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fce:	4b10      	ldr	r3, [pc, #64]	; (8001010 <HAL_RCC_OscConfig+0x478>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd4:	f7ff fcee 	bl	80009b4 <HAL_GetTick>
 8000fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fda:	e008      	b.n	8000fee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fdc:	f7ff fcea 	bl	80009b4 <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d901      	bls.n	8000fee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e045      	b.n	800107a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <HAL_RCC_OscConfig+0x470>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d1f0      	bne.n	8000fdc <HAL_RCC_OscConfig+0x444>
 8000ffa:	e03d      	b.n	8001078 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d107      	bne.n	8001014 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	e038      	b.n	800107a <HAL_RCC_OscConfig+0x4e2>
 8001008:	40023800 	.word	0x40023800
 800100c:	40007000 	.word	0x40007000
 8001010:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001014:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <HAL_RCC_OscConfig+0x4ec>)
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d028      	beq.n	8001074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800102c:	429a      	cmp	r2, r3
 800102e:	d121      	bne.n	8001074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800103a:	429a      	cmp	r2, r3
 800103c:	d11a      	bne.n	8001074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001044:	4013      	ands	r3, r2
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800104a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800104c:	4293      	cmp	r3, r2
 800104e:	d111      	bne.n	8001074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800105a:	085b      	lsrs	r3, r3, #1
 800105c:	3b01      	subs	r3, #1
 800105e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001060:	429a      	cmp	r2, r3
 8001062:	d107      	bne.n	8001074 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800106e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001070:	429a      	cmp	r2, r3
 8001072:	d001      	beq.n	8001078 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	e000      	b.n	800107a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3718      	adds	r7, #24
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40023800 	.word	0x40023800

08001088 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d101      	bne.n	800109c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e0cc      	b.n	8001236 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800109c:	4b68      	ldr	r3, [pc, #416]	; (8001240 <HAL_RCC_ClockConfig+0x1b8>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 030f 	and.w	r3, r3, #15
 80010a4:	683a      	ldr	r2, [r7, #0]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d90c      	bls.n	80010c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010aa:	4b65      	ldr	r3, [pc, #404]	; (8001240 <HAL_RCC_ClockConfig+0x1b8>)
 80010ac:	683a      	ldr	r2, [r7, #0]
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010b2:	4b63      	ldr	r3, [pc, #396]	; (8001240 <HAL_RCC_ClockConfig+0x1b8>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 030f 	and.w	r3, r3, #15
 80010ba:	683a      	ldr	r2, [r7, #0]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d001      	beq.n	80010c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e0b8      	b.n	8001236 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 0302 	and.w	r3, r3, #2
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d020      	beq.n	8001112 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0304 	and.w	r3, r3, #4
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d005      	beq.n	80010e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010dc:	4b59      	ldr	r3, [pc, #356]	; (8001244 <HAL_RCC_ClockConfig+0x1bc>)
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	4a58      	ldr	r2, [pc, #352]	; (8001244 <HAL_RCC_ClockConfig+0x1bc>)
 80010e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80010e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 0308 	and.w	r3, r3, #8
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d005      	beq.n	8001100 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010f4:	4b53      	ldr	r3, [pc, #332]	; (8001244 <HAL_RCC_ClockConfig+0x1bc>)
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	4a52      	ldr	r2, [pc, #328]	; (8001244 <HAL_RCC_ClockConfig+0x1bc>)
 80010fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80010fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001100:	4b50      	ldr	r3, [pc, #320]	; (8001244 <HAL_RCC_ClockConfig+0x1bc>)
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	494d      	ldr	r1, [pc, #308]	; (8001244 <HAL_RCC_ClockConfig+0x1bc>)
 800110e:	4313      	orrs	r3, r2
 8001110:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	2b00      	cmp	r3, #0
 800111c:	d044      	beq.n	80011a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d107      	bne.n	8001136 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001126:	4b47      	ldr	r3, [pc, #284]	; (8001244 <HAL_RCC_ClockConfig+0x1bc>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d119      	bne.n	8001166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e07f      	b.n	8001236 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	2b02      	cmp	r3, #2
 800113c:	d003      	beq.n	8001146 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001142:	2b03      	cmp	r3, #3
 8001144:	d107      	bne.n	8001156 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001146:	4b3f      	ldr	r3, [pc, #252]	; (8001244 <HAL_RCC_ClockConfig+0x1bc>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d109      	bne.n	8001166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e06f      	b.n	8001236 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001156:	4b3b      	ldr	r3, [pc, #236]	; (8001244 <HAL_RCC_ClockConfig+0x1bc>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	2b00      	cmp	r3, #0
 8001160:	d101      	bne.n	8001166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e067      	b.n	8001236 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001166:	4b37      	ldr	r3, [pc, #220]	; (8001244 <HAL_RCC_ClockConfig+0x1bc>)
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f023 0203 	bic.w	r2, r3, #3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	4934      	ldr	r1, [pc, #208]	; (8001244 <HAL_RCC_ClockConfig+0x1bc>)
 8001174:	4313      	orrs	r3, r2
 8001176:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001178:	f7ff fc1c 	bl	80009b4 <HAL_GetTick>
 800117c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800117e:	e00a      	b.n	8001196 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001180:	f7ff fc18 	bl	80009b4 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	f241 3288 	movw	r2, #5000	; 0x1388
 800118e:	4293      	cmp	r3, r2
 8001190:	d901      	bls.n	8001196 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e04f      	b.n	8001236 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001196:	4b2b      	ldr	r3, [pc, #172]	; (8001244 <HAL_RCC_ClockConfig+0x1bc>)
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	f003 020c 	and.w	r2, r3, #12
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d1eb      	bne.n	8001180 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011a8:	4b25      	ldr	r3, [pc, #148]	; (8001240 <HAL_RCC_ClockConfig+0x1b8>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 030f 	and.w	r3, r3, #15
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d20c      	bcs.n	80011d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011b6:	4b22      	ldr	r3, [pc, #136]	; (8001240 <HAL_RCC_ClockConfig+0x1b8>)
 80011b8:	683a      	ldr	r2, [r7, #0]
 80011ba:	b2d2      	uxtb	r2, r2
 80011bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011be:	4b20      	ldr	r3, [pc, #128]	; (8001240 <HAL_RCC_ClockConfig+0x1b8>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 030f 	and.w	r3, r3, #15
 80011c6:	683a      	ldr	r2, [r7, #0]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d001      	beq.n	80011d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e032      	b.n	8001236 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0304 	and.w	r3, r3, #4
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d008      	beq.n	80011ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011dc:	4b19      	ldr	r3, [pc, #100]	; (8001244 <HAL_RCC_ClockConfig+0x1bc>)
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	4916      	ldr	r1, [pc, #88]	; (8001244 <HAL_RCC_ClockConfig+0x1bc>)
 80011ea:	4313      	orrs	r3, r2
 80011ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0308 	and.w	r3, r3, #8
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d009      	beq.n	800120e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011fa:	4b12      	ldr	r3, [pc, #72]	; (8001244 <HAL_RCC_ClockConfig+0x1bc>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	691b      	ldr	r3, [r3, #16]
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	490e      	ldr	r1, [pc, #56]	; (8001244 <HAL_RCC_ClockConfig+0x1bc>)
 800120a:	4313      	orrs	r3, r2
 800120c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800120e:	f000 f821 	bl	8001254 <HAL_RCC_GetSysClockFreq>
 8001212:	4602      	mov	r2, r0
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <HAL_RCC_ClockConfig+0x1bc>)
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	091b      	lsrs	r3, r3, #4
 800121a:	f003 030f 	and.w	r3, r3, #15
 800121e:	490a      	ldr	r1, [pc, #40]	; (8001248 <HAL_RCC_ClockConfig+0x1c0>)
 8001220:	5ccb      	ldrb	r3, [r1, r3]
 8001222:	fa22 f303 	lsr.w	r3, r2, r3
 8001226:	4a09      	ldr	r2, [pc, #36]	; (800124c <HAL_RCC_ClockConfig+0x1c4>)
 8001228:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800122a:	4b09      	ldr	r3, [pc, #36]	; (8001250 <HAL_RCC_ClockConfig+0x1c8>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fb7c 	bl	800092c <HAL_InitTick>

  return HAL_OK;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40023c00 	.word	0x40023c00
 8001244:	40023800 	.word	0x40023800
 8001248:	0800146c 	.word	0x0800146c
 800124c:	20000000 	.word	0x20000000
 8001250:	20000004 	.word	0x20000004

08001254 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001254:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001258:	b090      	sub	sp, #64	; 0x40
 800125a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800125c:	2300      	movs	r3, #0
 800125e:	637b      	str	r3, [r7, #52]	; 0x34
 8001260:	2300      	movs	r3, #0
 8001262:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001264:	2300      	movs	r3, #0
 8001266:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001268:	2300      	movs	r3, #0
 800126a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800126c:	4b59      	ldr	r3, [pc, #356]	; (80013d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	f003 030c 	and.w	r3, r3, #12
 8001274:	2b08      	cmp	r3, #8
 8001276:	d00d      	beq.n	8001294 <HAL_RCC_GetSysClockFreq+0x40>
 8001278:	2b08      	cmp	r3, #8
 800127a:	f200 80a1 	bhi.w	80013c0 <HAL_RCC_GetSysClockFreq+0x16c>
 800127e:	2b00      	cmp	r3, #0
 8001280:	d002      	beq.n	8001288 <HAL_RCC_GetSysClockFreq+0x34>
 8001282:	2b04      	cmp	r3, #4
 8001284:	d003      	beq.n	800128e <HAL_RCC_GetSysClockFreq+0x3a>
 8001286:	e09b      	b.n	80013c0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001288:	4b53      	ldr	r3, [pc, #332]	; (80013d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800128a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800128c:	e09b      	b.n	80013c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800128e:	4b53      	ldr	r3, [pc, #332]	; (80013dc <HAL_RCC_GetSysClockFreq+0x188>)
 8001290:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001292:	e098      	b.n	80013c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001294:	4b4f      	ldr	r3, [pc, #316]	; (80013d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800129c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800129e:	4b4d      	ldr	r3, [pc, #308]	; (80013d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d028      	beq.n	80012fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012aa:	4b4a      	ldr	r3, [pc, #296]	; (80013d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	099b      	lsrs	r3, r3, #6
 80012b0:	2200      	movs	r2, #0
 80012b2:	623b      	str	r3, [r7, #32]
 80012b4:	627a      	str	r2, [r7, #36]	; 0x24
 80012b6:	6a3b      	ldr	r3, [r7, #32]
 80012b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80012bc:	2100      	movs	r1, #0
 80012be:	4b47      	ldr	r3, [pc, #284]	; (80013dc <HAL_RCC_GetSysClockFreq+0x188>)
 80012c0:	fb03 f201 	mul.w	r2, r3, r1
 80012c4:	2300      	movs	r3, #0
 80012c6:	fb00 f303 	mul.w	r3, r0, r3
 80012ca:	4413      	add	r3, r2
 80012cc:	4a43      	ldr	r2, [pc, #268]	; (80013dc <HAL_RCC_GetSysClockFreq+0x188>)
 80012ce:	fba0 1202 	umull	r1, r2, r0, r2
 80012d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80012d4:	460a      	mov	r2, r1
 80012d6:	62ba      	str	r2, [r7, #40]	; 0x28
 80012d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012da:	4413      	add	r3, r2
 80012dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012e0:	2200      	movs	r2, #0
 80012e2:	61bb      	str	r3, [r7, #24]
 80012e4:	61fa      	str	r2, [r7, #28]
 80012e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80012ee:	f7fe ffbd 	bl	800026c <__aeabi_uldivmod>
 80012f2:	4602      	mov	r2, r0
 80012f4:	460b      	mov	r3, r1
 80012f6:	4613      	mov	r3, r2
 80012f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012fa:	e053      	b.n	80013a4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012fc:	4b35      	ldr	r3, [pc, #212]	; (80013d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	099b      	lsrs	r3, r3, #6
 8001302:	2200      	movs	r2, #0
 8001304:	613b      	str	r3, [r7, #16]
 8001306:	617a      	str	r2, [r7, #20]
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800130e:	f04f 0b00 	mov.w	fp, #0
 8001312:	4652      	mov	r2, sl
 8001314:	465b      	mov	r3, fp
 8001316:	f04f 0000 	mov.w	r0, #0
 800131a:	f04f 0100 	mov.w	r1, #0
 800131e:	0159      	lsls	r1, r3, #5
 8001320:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001324:	0150      	lsls	r0, r2, #5
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	ebb2 080a 	subs.w	r8, r2, sl
 800132e:	eb63 090b 	sbc.w	r9, r3, fp
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	f04f 0300 	mov.w	r3, #0
 800133a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800133e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001342:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001346:	ebb2 0408 	subs.w	r4, r2, r8
 800134a:	eb63 0509 	sbc.w	r5, r3, r9
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	f04f 0300 	mov.w	r3, #0
 8001356:	00eb      	lsls	r3, r5, #3
 8001358:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800135c:	00e2      	lsls	r2, r4, #3
 800135e:	4614      	mov	r4, r2
 8001360:	461d      	mov	r5, r3
 8001362:	eb14 030a 	adds.w	r3, r4, sl
 8001366:	603b      	str	r3, [r7, #0]
 8001368:	eb45 030b 	adc.w	r3, r5, fp
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	f04f 0200 	mov.w	r2, #0
 8001372:	f04f 0300 	mov.w	r3, #0
 8001376:	e9d7 4500 	ldrd	r4, r5, [r7]
 800137a:	4629      	mov	r1, r5
 800137c:	028b      	lsls	r3, r1, #10
 800137e:	4621      	mov	r1, r4
 8001380:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001384:	4621      	mov	r1, r4
 8001386:	028a      	lsls	r2, r1, #10
 8001388:	4610      	mov	r0, r2
 800138a:	4619      	mov	r1, r3
 800138c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800138e:	2200      	movs	r2, #0
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	60fa      	str	r2, [r7, #12]
 8001394:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001398:	f7fe ff68 	bl	800026c <__aeabi_uldivmod>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	4613      	mov	r3, r2
 80013a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80013a4:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	0c1b      	lsrs	r3, r3, #16
 80013aa:	f003 0303 	and.w	r3, r3, #3
 80013ae:	3301      	adds	r3, #1
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80013b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80013b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80013bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80013be:	e002      	b.n	80013c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80013c0:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <HAL_RCC_GetSysClockFreq+0x184>)
 80013c2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80013c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3740      	adds	r7, #64	; 0x40
 80013cc:	46bd      	mov	sp, r7
 80013ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80013d2:	bf00      	nop
 80013d4:	40023800 	.word	0x40023800
 80013d8:	00f42400 	.word	0x00f42400
 80013dc:	017d7840 	.word	0x017d7840

080013e0 <memset>:
 80013e0:	4402      	add	r2, r0
 80013e2:	4603      	mov	r3, r0
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d100      	bne.n	80013ea <memset+0xa>
 80013e8:	4770      	bx	lr
 80013ea:	f803 1b01 	strb.w	r1, [r3], #1
 80013ee:	e7f9      	b.n	80013e4 <memset+0x4>

080013f0 <__libc_init_array>:
 80013f0:	b570      	push	{r4, r5, r6, lr}
 80013f2:	4d0d      	ldr	r5, [pc, #52]	; (8001428 <__libc_init_array+0x38>)
 80013f4:	4c0d      	ldr	r4, [pc, #52]	; (800142c <__libc_init_array+0x3c>)
 80013f6:	1b64      	subs	r4, r4, r5
 80013f8:	10a4      	asrs	r4, r4, #2
 80013fa:	2600      	movs	r6, #0
 80013fc:	42a6      	cmp	r6, r4
 80013fe:	d109      	bne.n	8001414 <__libc_init_array+0x24>
 8001400:	4d0b      	ldr	r5, [pc, #44]	; (8001430 <__libc_init_array+0x40>)
 8001402:	4c0c      	ldr	r4, [pc, #48]	; (8001434 <__libc_init_array+0x44>)
 8001404:	f000 f818 	bl	8001438 <_init>
 8001408:	1b64      	subs	r4, r4, r5
 800140a:	10a4      	asrs	r4, r4, #2
 800140c:	2600      	movs	r6, #0
 800140e:	42a6      	cmp	r6, r4
 8001410:	d105      	bne.n	800141e <__libc_init_array+0x2e>
 8001412:	bd70      	pop	{r4, r5, r6, pc}
 8001414:	f855 3b04 	ldr.w	r3, [r5], #4
 8001418:	4798      	blx	r3
 800141a:	3601      	adds	r6, #1
 800141c:	e7ee      	b.n	80013fc <__libc_init_array+0xc>
 800141e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001422:	4798      	blx	r3
 8001424:	3601      	adds	r6, #1
 8001426:	e7f2      	b.n	800140e <__libc_init_array+0x1e>
 8001428:	08001484 	.word	0x08001484
 800142c:	08001484 	.word	0x08001484
 8001430:	08001484 	.word	0x08001484
 8001434:	08001488 	.word	0x08001488

08001438 <_init>:
 8001438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800143a:	bf00      	nop
 800143c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800143e:	bc08      	pop	{r3}
 8001440:	469e      	mov	lr, r3
 8001442:	4770      	bx	lr

08001444 <_fini>:
 8001444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001446:	bf00      	nop
 8001448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800144a:	bc08      	pop	{r3}
 800144c:	469e      	mov	lr, r3
 800144e:	4770      	bx	lr
